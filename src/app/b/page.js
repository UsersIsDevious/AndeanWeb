"use client";

import React, { useMemo } from "react";
import { DeckGL } from "@deck.gl/react";
import { OrthographicView } from "@deck.gl/core";
import { PolygonLayer } from "@deck.gl/layers";

// 提供されたドーナッツ円の頂点データ（JSON形式）
// 外側のリングと内側のリングの2つの配列になっています
const ringPolygon = {
  polygon: [
    [
      [4000, 0],
      [3980.7389066887877, 392.0685613182424],
      [3923.141121612922, 780.361288064513],
      [3827.7613429288353, 1161.1387090178494],
      [3695.518130045147, 1530.7337294603592],
      [3527.6850573934203, 1885.5869473039907],
      [3325.878449210181, 2222.2809320784086],
      [3092.0418134509478, 2537.573136654582],
      [2828.42712474619, 2828.4271247461897],
      [2537.573136654582, 3092.0418134509478],
      [2222.280932078409, 3325.878449210181],
      [1885.5869473039913, 3527.68505739342],
      [1530.7337294603594, 3695.518130045147],
      [1161.1387090178494, 3827.761342928836],
      [780.3612880645134, 3923.141121612922],
      [392.0685613182431, 3980.738906688787],
      [2.4492935982947065e-13, 4000],
      [-392.0685613182426, 3980.7389066887877],
      [-780.3612880645128, 3923.141121612922],
      [-1161.1387090178487, 3827.761342928836],
      [-1530.733729460359, 3695.518130045147],
      [-1885.5869473039909, 3527.6850573934203],
      [-2222.2809320784077, 3325.8784492101818],
      [-2537.5731366545815, 3092.041813450948],
      [-2828.4271247461897, 2828.42712474619],
      [-3092.0418134509478, 2537.573136654582],
      [-3325.8784492101813, 2222.2809320784086],
      [-3527.68505739342, 1885.5869473039916],
      [-3695.518130045147, 1530.7337294603597],
      [-3827.7613429288353, 1161.1387090178496],
      [-3923.141121612922, 780.3612880645144],
      [-3980.738906688787, 392.0685613182433],
      [-4000, 4.898587196589413e-13],
      [-3980.7389066887877, -392.06856131824236],
      [-3923.141121612922, -780.3612880645135],
      [-3827.761342928836, -1161.1387090178484],
      [-3695.5181300451472, -1530.7337294603587],
      [-3527.6850573934203, -1885.5869473039907],
      [-3325.8784492101818, -2222.2809320784077],
      [-3092.041813450948, -2537.573136654581],
      [-2828.4271247461907, -2828.4271247461897],
      [-2537.573136654584, -3092.041813450947],
      [-2222.2809320784086, -3325.878449210181],
      [-1885.5869473039916, -3527.68505739342],
      [-1530.7337294603612, -3695.518130045146],
      [-1161.1387090178498, -3827.7613429288353],
      [-780.3612880645146, -3923.1411216129213],
      [-392.0685613182418, -3980.7389066887877],
      [-7.347880794884119e-13, -4000],
      [392.06856131824037, -3980.7389066887877],
      [780.3612880645132, -3923.141121612922],
      [1161.1387090178482, -3827.761342928836],
      [1530.73372946036, -3695.5181300451463],
      [1885.5869473039904, -3527.6850573934203],
      [2222.280932078407, -3325.8784492101818],
      [2537.5731366545824, -3092.0418134509473],
      [2828.4271247461893, -2828.4271247461907],
      [3092.041813450947, -2537.573136654584],
      [3325.878449210181, -2222.2809320784086],
      [3527.6850573934194, -1885.5869473039916],
      [3695.518130045146, -1530.7337294603615],
      [3827.7613429288353, -1161.13870901785],
      [3923.1411216129213, -780.3612880645148],
      [3980.7389066887877, -392.068561318242]
    ],
    [
      [
        731.5682493994697,
        -660.5370266931968
      ],
      [
        717.1688031305031,
        -757.610208379765
      ],
      [
        693.3238584594816,
        -852.8045636180989
      ],
      [
        660.2630552385592,
        -945.2033187287268
      ],
      [
        618.3047870756276,
        -1033.9166231896343
      ],
      [
        567.853135029818,
        -1118.0901193832385
      ],
      [
        509.39397609000946,
        -1196.9131705272823
      ],
      [
        443.49030391382007,
        -1269.626667550184
      ],
      [
        370.77680689091835,
        -1335.5303397263733
      ],
      [
        291.95375574687455,
        -1393.9894986661818
      ],
      [
        207.78025955327035,
        -1444.4411507119914
      ],
      [
        119.06695509236278,
        -1486.399418874923
      ],
      [
        26.6681999817348,
        -1519.4602220958454
      ],
      [
        -68.52615525659894,
        -1543.305166766867
      ],
      [
        -165.59933694316715,
        -1557.7046130358333
      ],
      [
        -263.6164772727274,
        -1562.5198863636365
      ],
      [
        -361.6336176022877,
        -1557.7046130358333
      ],
      [
        -458.7067992888559,
        -1543.3051667668667
      ],
      [
        -553.9011545271896,
        -1519.4602220958452
      ],
      [
        -646.2999096378176,
        -1486.399418874923
      ],
      [
        -735.0132140987251,
        -1444.4411507119912
      ],
      [
        -819.1867102923294,
        -1393.9894986661816
      ],
      [
        -898.0097614363732,
        -1335.530339726373
      ],
      [
        -970.7232584592749,
        -1269.6266675501838
      ],
      [
        -1036.6269306354643,
        -1196.9131705272816
      ],
      [
        -1095.0860895752726,
        -1118.0901193832383
      ],
      [
        -1145.5377416210822,
        -1033.916623189634
      ],
      [
        -1187.496009784014,
        -945.2033187287261
      ],
      [
        -1220.5568130049362,
        -852.8045636180984
      ],
      [
        -1244.4017576759577,
        -757.6102083797648
      ],
      [
        -1258.801203944924,
        -660.5370266931969
      ],
      [
        -1263.6164772727273,
        -562.5198863636363
      ],
      [
        -1258.801203944924,
        -464.5027460340755
      ],
      [
        -1244.4017576759577,
        -367.4295643475078
      ],
      [
        -1220.556813004936,
        -272.235209109174
      ],
      [
        -1187.496009784014,
        -179.83645399854646
      ],
      [
        -1145.5377416210822,
        -91.12314953763848
      ],
      [
        -1095.0860895752726,
        -6.949653344034232
      ],
      [
        -1036.6269306354643,
        71.87339780000912
      ],
      [
        -970.7232584592747,
        144.58689482291118
      ],
      [
        -898.0097614363726,
        210.49056699910068
      ],
      [
        -819.1867102923292,
        268.94972593890907
      ],
      [
        -735.013214098725,
        319.4013779847187
      ],
      [
        -646.299909637817,
        361.3596461476503
      ],
      [
        -553.9011545271894,
        394.4204493685726
      ],
      [
        -458.70679928885545,
        418.26539403959407
      ],
      [
        -361.6336176022879,
        432.66484030856054
      ],
      [
        -263.6164772727272,
        437.4801136363636
      ],
      [
        -165.59933694316646,
        432.66484030856043
      ],
      [
        -68.52615525659891,
        418.26539403959407
      ],
      [
        26.668199981735086,
        394.4204493685726
      ],
      [
        119.0669550923626,
        361.3596461476503
      ],
      [
        207.78025955327058,
        319.4013779847186
      ],
      [
        291.953755746875,
        268.94972593890884
      ],
      [
        370.77680689091824,
        210.49056699910057
      ],
      [
        443.4903039138203,
        144.58689482291106
      ],
      [
        509.3939760900097,
        71.87339780000912
      ],
      [
        567.853135029818,
        -6.949653344034232
      ],
      [
        618.3047870756278,
        -91.12314953763871
      ],
      [
        660.2630552385594,
        -179.83645399854657
      ],
      [
        693.3238584594816,
        -272.23520910917404
      ],
      [
        717.1688031305032,
        -367.4295643475081
      ],
      [
        731.5682493994697,
        -464.50274603407576
      ],
      [
        736.3835227272727,
        -562.5198863636364
      ]
    ]
  ]
};

export default function DonutMap() {
  // 頂点データが固定の場合、useMemo でメモ化しておくと再計算が不要になります
  const data = useMemo(() => {
    // deck.gl の PolygonLayer は、最初のリングを外側の輪郭、その後のリングを穴として扱います。
    // サンプルデータの場合、ringPolygon.polygon はすでに [外円, 内円] の形式になっています。
    return [
      {
        // プロパティ名は getPolygon で参照できるように任意に設定
        polygon: ringPolygon.polygon,
      },
    ];
  }, []);

  // PolygonLayer の設定
  const layer = useMemo(() => {
    return new PolygonLayer({
      id: "donut-layer",
      data,
      getPolygon: (d) => d.polygon,
      getFillColor: [255, 165, 0, 200], // オレンジ色（半透明）
      getLineColor: [0, 0, 0],
      lineWidthMinPixels: 2,
      stroked: true,
      filled: true,
      pickable: true,
    });
  }, [data]);

  // 初期ビュー設定。必要に応じて target や zoom の値を調整してください。
  const INITIAL_VIEW_STATE = {
    target: [2000, 2000, 0],
    zoom: 0,
  };

  return (
    <DeckGL
      initialViewState={INITIAL_VIEW_STATE}
      controller={true}
      views={new OrthographicView()}
      layers={[layer]}
      style={{ width: "100vw", height: "100vh" }}
    />
  );
}
